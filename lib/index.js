// Generated by CoffeeScript 1.7.0
(function() {
  var Metalsmith, Smithsonian, bodyParser, defaults, express, fs, path, session;

  fs = require('fs');

  path = require('path');

  express = require('express');

  session = require('cookie-session');

  defaults = require('defaults');

  bodyParser = require('body-parser');

  Metalsmith = require('metalsmith');

  Smithsonian = function(dir) {
    if (!(this instanceof Smithsonian)) {
      return new Smithsonian(dir);
    }
    this.metalsmith = Metalsmith(dir);
    this.options({});
    return this;
  };

  Smithsonian.prototype.use = function(ware) {
    this.metalsmith.use(ware);
    return this;
  };

  Smithsonian.prototype.build = function(next) {
    this.metalsmith.build(next);
    return this;
  };

  Smithsonian.prototype.options = function(options) {
    var root;
    if (arguments.length === 0) {
      return this._options;
    }
    root = path.normalize(__dirname + '/..');
    this._options = defaults(options, {
      appName: 'Smithsonian',
      auth: false,
      authKeys: {
        username: 'admin',
        password: 'password'
      },
      autoBuild: false,
      credits: true,
      extension: 'md',
      filename: function(name, ext) {
        var d, date, desc, m, y;
        date = new Date(Date.now());
        y = date.getFullYear();
        m = date.getMonth() + 1;
        d = date.getDate();
        desc = name.toLowerCase().split(' ').join('-');
        return "" + y + "-" + m + "-" + d + "-" + desc + "." + ext;
      },
      filedata: function(name, ext) {
        var timestamp;
        timestamp = (function() {
          var d, date, hr, m, mn, sc, y;
          date = new Date(Date.now());
          y = date.getFullYear();
          m = date.getMonth() + 1;
          d = date.getDate();
          hr = date.getHours() + 1;
          mn = date.getMinutes() + 1;
          sc = date.getSeconds() + 1;
          return "" + y + "-" + m + "-" + d + " " + hr + ":" + mn + ":" + sc;
        })();
        return "---\ntitle: \"" + name + "\"\ndate: " + timestamp + "\ntemplate: post.jade\n---";
      },
      handleError: function(error) {
        if (error) {
          throw error;
        }
      },
      namespace: '',
      sessionKeys: ['undercover', 'renegade'],
      "static": root + '/public',
      views: root + '/view',
      viewEngine: 'jade',
      viewOptions: {
        layout: false,
        self: true
      }
    });
    return this;
  };

  Smithsonian.prototype.server = function() {
    var all, autoBuild, cleanDest, create, destDir, dir, handleError, index, ns, options, remove, rename, resource, srcDir, update;
    options = this.options();
    ns = function(x) {
      return options.namespace + x;
    };
    handleError = options.handleError;
    autoBuild = function(next) {
      if (next == null) {
        next = function() {};
      }
      if (options.autoBuild) {
        return this.build(next);
      }
      return next(null);
    };
    srcDir = this.metalsmith.source();
    destDir = this.metalsmith.destination();
    dir = function(path) {
      return "" + srcDir + "/" + path;
    };
    this.app = express().set('views', options.views).set('view engine', options.viewEngine).set('view options', options.viewOptions).use(ns('/'), express["static"](options["static"])).use(session({
      keys: options.sessionKeys
    })).use(bodyParser());
    all = ns('*');
    index = ns('/');
    create = ns('/file');
    resource = ns('/file/:name');
    this.app.all(all, function(req, res, next) {
      if (!options.auth) {
        req.session.authed = true;
      }
      res.locals.appName = options.appName;
      res.locals.credits = options.credits;
      res.locals.autoBuild = options.autoBuild;
      res.locals.ns = ns;
      return next();
    });
    this.app.get(index, function(req, res, next) {
      if (req.session.authed) {
        return next('route');
      }
      return res.render('login');
    });
    this.app.post(index, function(req, res, next) {
      if (req.session.authed) {
        return next('route');
      }
      if (options.authKeys.username !== req.body.username) {
        return res.render('login', {
          e: 0,
          error: 'Incorrect username.'
        });
      }
      if (options.authKeys.password !== req.body.password) {
        return res.render('login', {
          e: 1,
          error: 'Incorrect password.'
        });
      }
      req.session.authed = true;
      return next();
    });
    this.app.all(all, function(req, res, next) {
      if (!req.session.authed) {
        return res.status(500).send('Not Authenicated.');
      }
      res.locals.authed = req.session.authed && options.auth;
      return next();
    });
    this.app.all(index, function(req, res, next) {
      return fs.readdir(srcDir, function(error, filenames) {
        handleError(error);
        res.locals.filenames = filenames;
        return res.render('list');
      });
    });
    this.app.post(create, function(req, res, next) {
      var filedata, filename, name;
      if (!(name = req.body.name)) {
        return next();
      }
      filename = options.filename(name, options.extension);
      filedata = options.filedata(name, options.extension);
      return fs.writeFile(dir(filename), filedata, function(error) {
        handleError(error);
        res.redirect(ns("/file/" + filename));
        return autoBuild();
      });
    });
    this.app.get(resource, function(req, res, next) {
      var name;
      if (!(name = req.params.name)) {
        return next();
      }
      return fs.readFile(dir(name), function(error, data) {
        handleError(error);
        return res.render('file', {
          name: name,
          data: data
        });
      });
    });
    this.app.post(resource, function(req, res, next) {
      if (req.body.action === 'update') {
        return update(req, res, next);
      }
      if (req.body.action === 'delete') {
        return remove(req, res, next);
      }
      return next();
    });
    rename = function(currName, nextName, next) {
      if (!nextName || currName === nextName) {
        return next(null, currName, false);
      }
      return fs.rename(dir(currName), dir(nextName), function(error) {
        handleError(error);
        return next(error, nextName, true);
      });
    };
    update = function(req, res, next) {
      var currName, data, name, _ref;
      if (!(currName = req.params.name)) {
        return next();
      }
      _ref = req.body, name = _ref.name, data = _ref.data;
      if (!(name && data)) {
        return next();
      }
      return rename(currName, name, function(error, name, renamed) {
        return fs.writeFile(dir(name), data, function(error) {
          handleError(error);
          if (renamed) {
            res.redirect(ns("/file/" + name));
            cleanDest(currName);
          } else {
            res.render('file', {
              name: name,
              data: data
            });
          }
          return autoBuild();
        });
      });
    };
    remove = function(req, res, next) {
      var name;
      if (!(name = req.params.name)) {
        return next();
      }
      fs.unlink(dir(name), function(error) {
        handleError(error);
        res.redirect(index);
        return autoBuild();
      });
      return cleanDest(name);
    };
    cleanDest = function(filename, next) {
      if (next == null) {
        next = function() {};
      }
      return fs.unlink("" + destDir + "/" + filename, function(error) {
        return next(error);
      });
    };
    this.app.get(ns('/build'), (function(_this) {
      return function(req, res, next) {
        return _this.build(function() {
          return res.redirect(index);
        });
      };
    })(this));
    return this.app.get(ns('/logout'), function(req, res, next) {
      req.session = null;
      return res.redirect(index);
    });
  };

  Smithsonian.prototype.listen = function() {
    var args;
    args = arguments;
    this.server();
    return this.build((function(_this) {
      return function() {
        return _this.app.listen.apply(_this.app, args);
      };
    })(this));
  };

  module.exports = Smithsonian;

}).call(this);
